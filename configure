#!/bin/bash
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize.
# This script is based on libcppa configure script.

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

command="$0 $*"
sourcedir="$( cd "$( dirname "$0" )" && pwd )"
usage="\
Usage: $0 [OPTION]... 

  Build Options:
    --build-dir=DIR             build directory                [build]
    --with-compiler=FILE        compiler name (or path)

  Installation Directories:
    --prefix=PREFIX             installation directory         [/usr/local]

  Required Packages in Non-Standard Locations:
    --with-atlas=PATH           path to ATLAS    install root
    --with-boost=PATH           path to Boost    install root
    --with-graphviz=PATH        path to GraphViz install root  [tools/graphviz]
    --with-kaldi=PATH           path to Kaldi    install root  [tools/kaldi]
    --with-libcppa=PATH         path to libcppa  install root  [tools/libcppa]
"


# Appends a CMake cache entry definition to the CMakeCacheEntries variable.
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry ()
{
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# Creates a build directory via CMake.
#   $1 is the build directory.
#   $2 is the path to a compiler executable.
configure ()
{
    builddir=$1
    compiler=$2
    
    if [[ "$builddir" != /* ]]; then
        # relative path given; convert to absolute path
        builddir="$(pwd)/$builddir"
    fi
    
    if [ -n "$compiler" ]; then
      append_cache_entry CMAKE_CXX_COMPILER FILEPATH `which $compiler`
      compilername=`basename $compiler`
      workdir="$builddir/$compilername"
    else
      workdir="$builddir/c++"
    fi
    
    append_cache_entry EXECUTABLE_OUTPUT_PATH PATH "$workdir/bin"
    append_cache_entry LIBRARY_OUTPUT_PATH PATH "$workdir/lib"
    workdirs="$workdirs $workdir"
    
    mkdir -p $workdir
    cd $workdir
    rm -f CMakeCache.txt
    cmake $CMakeCacheEntries $sourcedir
    echo "# This is the command used to configure this build" > config.status
    echo $command >> config.status
    chmod u+x config.status
}

# Set defaults.
builddir="$sourcedir/build"
CMakeCacheEntries=""
append_cache_entry CMAKE_INSTALL_PREFIX PATH /usr/local
append_cache_entry GRAPHVIZ_ROOT PATH $sourcedir/tools/graphviz
append_cache_entry KALDI_ROOT PATH $sourcedir/tools/kaldi
append_cache_entry CPPA_ROOT PATH $sourcedir/tools/libcppa

# Parse arguments.
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --build-dir=*)
            builddir=$optarg
            ;;
        --with-compiler=*)
            compiler=$optarg
            ;;
        --prefix=*)
            append_cache_entry CMAKE_INSTALL_PREFIX PATH $optarg
            ;;
        --with-atlas=*)
            append_cache_entry ATLAS_ROOT PATH $optarg
            ;;
        --with-boost=*)
            append_cache_entry BOOST_ROOT PATH $optarg
            ;;
        --with-graphviz=*)
            append_cache_entry GRAPHVIZ_ROOT PATH $optarg
            ;;
        --with-kaldi=*)
            append_cache_entry KALDI_ROOT PATH $optarg
            ;;
        --with-libcppa=*)
            append_cache_entry CPPA_ROOT PATH $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

configure $builddir $compiler

printf "DIRS := %s\n\n" "$workdirs" > $sourcedir/Makefile
makefile=$(cat <<'EOT'
all:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

test:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

install:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

uninstall:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

clean:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

distclean:
	rm -rf $(DIRS) Makefile

doc:
	$(MAKE) -C $(firstword $(DIRS)) $@

.PHONY: all test install uninstall clean distclean
EOT
)

echo "$makefile" >> $sourcedir/Makefile
